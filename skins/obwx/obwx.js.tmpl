// Makeshift debug function
function debug ( msg ) {
        console.log( "Info: " + msg );
    }
/////////////////////////
// Connect to mqtt server
/////////////////////////
function connect() {
    client = new Paho.Client("$Extras.websocket_host", $Extras.websocket_port, mqttclient);

    let mqtt_options = {
        useSSL: true,
        reconnect: true,
        onSuccess: onConnect,
        onFailure: onFailure
    }
    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;
    client.connect( mqtt_options );
}

function onConnect () {
    client.subscribe( "$Extras.websocket_topic" );
    debug("Successfully connected to mqtt server");
}

function onFailure () {
    debug("Connection to mqtt server FAILED");
}

function onConnectionLost ( responseObject ) {
    if ( responseObject.errorCode !== 0 ) {
        debug("MQTT disconnected: " + responseObject.errorMessage);
    }
}

// Process incoming mqtt data
function onMessageArrived ( message ) {
    process_payload ( message.payloadString  );
}

///////////////////////////////////////////////////////////////////////
// Global functions available to live, archive, and forecast data sets
///////////////////////////////////////////////////////////////////////

// Colorize Temps
function colorizeTemp ( temp ) {
    if ( temp >= 100 ) { return "rgb(223, 71, 150)"; }
    if ( temp >= 95 ) { return "rgb(221, 0, 0)"; }
    if ( temp >= 90 ) { return "rgb(232, 55, 0)"; }
    if ( temp >= 85 ) { return "rgb(242, 109, 0)"; }
    if ( temp >= 80 ) { return "rgb(253, 164, 0)"; }
    if ( temp >= 75 ) { return "rgb(244, 185, 0)"; }
    if ( temp >= 70 ) { return "rgb(236, 206, 0)"; }
    if ( temp >= 65 ) { return "rgb(227, 227, 0)"; }
    if ( temp >= 60 ) { return "rgb(151, 210, 15)"; }
    if ( temp >= 55 ) { return "rgb(76, 193, 29)"; }
    if ( temp >= 50 ) { return "rgb(0, 176, 44)"; }
    if ( temp >= 45 ) { return "rgb(0, 173, 167)"; }
    if ( temp >= 40 ) { return "rgb(0, 171, 220)"; }
    if ( temp >= 35 ) { return "rgb(0, 170, 255)"; }
    if ( temp >= 30 ) { return "rgb(59, 187, 248)"; }
    if ( temp >= 25 ) { return "rgb(117, 203, 241)"; }
    if ( temp >= 20 ) { return "rgb(176, 220, 234)"; }
    if ( temp >= 15 ) { return "rgb(160, 190, 239)"; }
    if ( temp >= 10 ) { return "rgb(144, 160, 243)"; }
    if ( temp >=  5 ) { return "rgb(128, 130, 248)"; }
    if ( temp >=  0 ) { return "rgb(155, 131, 247)"; }
    if ( temp < 0 ) { return "rgb(181, 132, 247)"; }
}

/////////////////////
// Process Live Data
/////////////////////
function process_payload ( data ) {
    data = jQuery.parseJSON ( data );

    // interval_minute is unique to mqtt archive updates, signaling json data has been updated
    if ( data.hasOwnProperty( 'interval_minute' ) ) {
        // Get and process forecast after 15 sec delay to allow new json files to be fully updated by weewx
        setTimeout( function() {
            get_forecast();
        }, 15000);
        // Same for archive data
        setTimeout( function() {
            get_archive();
        }, 15000);
    }

    // Update webpage with the live data
    let status_date = dayjs().format("dddd, MMM D");
    let status_time = dayjs().format("h:mm:ss A");
    jQuery(".websocket-date").html( status_date );
    jQuery(".websocket-time").html( status_time );

    if ( data.hasOwnProperty( 'barometer_inHg' ) ) {
        jQuery(".barometer").html("Barometer: " + parseFloat( data.barometer_inHg ).toFixed(2) );
    }

    if ( data.hasOwnProperty( 'dewpoint_F' ) ) {
        jQuery(".dewpoint").html("Dewpoint: " +  parseFloat( data.dewpoint_F ).toFixed(1) + "&deg;" );
    }

    if ( data.hasOwnProperty( 'extraHumid1' ) ) {
        jQuery(".extraHumid1").html("extraHumid1: " +  parseFloat( data.extraHumid1 ).toFixed(0) );
    }
    if ( data.hasOwnProperty( 'extraHumid2' ) ) {
        jQuery(".extraHumid2").html("extraHumid2: " +  parseFloat( data.extraHumid2 ).toFixed(0) );
    }

    if ( data.hasOwnProperty( 'extraTemp1_F' ) ) {
        jQuery(".extraTemp1").html("Living Area: " +  parseFloat( data.extraTemp1_F ).toFixed(1) );
    }
    if ( data.hasOwnProperty( 'extraTemp2_F' ) ) {
        jQuery(".extraTemp2").html("Bedroom: " +  parseFloat( data.extraTemp2_F ).toFixed(1) );
    }

    if ( data.hasOwnProperty( 'inDewpoint_F' ) ) {
        jQuery(".inDewpoint").html("inDewpoint: " +  parseFloat( data.inDewpoint_F ).toFixed(1) );
    }
    if ( data.hasOwnProperty( 'inHumidity' ) ) {
        jQuery(".inHumidity").html("Raspi Humidity: " +  parseFloat( data.inHumidity ).toFixed(0) );
    }
    if ( data.hasOwnProperty( 'inTemp_F' ) ) {
        jQuery(".inTemp").html("Raspi Temp: " +  parseFloat( data.inTemp_F ).toFixed(1) );
    }

    if ( data.hasOwnProperty( 'outHumidity' ) ) {
        jQuery(".outHumidity").html( "Humidity: " + parseFloat( data.outHumidity ).toFixed(1) + "&percnt;");
    }
    if ( data.hasOwnProperty( 'outTemp_F' ) ) {
        jQuery(".outTemp").html( parseFloat( data.outTemp_F ).toFixed(1) + "<sup>&deg;</sup>" );
        jQuery(".outTemp").css( "color", colorizeTemp( data.outTemp_F) );
    }
}

/////////////////////////////
// Process archive.json data 
/////////////////////////////

function get_archive () {
    jQuery.getJSON ( "archive.json", process_archive );
}

function process_archive ( data ) {
    // Daily records
    jQuery(".outTemp-day-high").html( data.today.outTemp.max );
    jQuery(".outTemp-day-low").html( data.today.outTemp.min );

    // Alamanac
    jQuery(".sunrise").html( "Sunrise: " + data.almanac.sunrise );
    jQuery(".sunset").html( "Sunset: " + data.almanac.sunset );
}

//////////////////////////////
// Process forecast.json data
//////////////////////////////

// Fetch the data from forecast.json
function get_forecast () {
    jQuery.getJSON ( "forecast.json", process_forecast );
}

// Update page with new json data
function process_forecast ( data ) {

    // Current Wx Icon
    let icon = data.current[0].response[0].periods[0].icon;
    icon = icon.split(".");
    jQuery(".current-wx-icon").html('<img src="./icons/' + icon[0] + '@2x.png">');
    jQuery(".current-wx-text").html( data.current[0].response[0].periods[0].weatherPrimary );

    // Alerts
    if ( data.alerts[0].success && data.alerts[0].error === null ) {

        let wx_alert_html = "";
        // Build alerts HTML
        for ( let i = 0; i < data.alerts[0].response.length; i++ ) {
            
            let wx_alert = data.alerts[0].response[i].details.name;
            let wx_alert_start = dayjs(new Date( data.alerts[0].response[i].timestamps.beginsISO )).format('ddd h:mm A');
            let wx_alert_end = dayjs(new Date( data.alerts[0].response[i].timestamps.expiresISO )).format('ddd h:mm A');
            let wx_alert_color = data.alerts[0].response[i].details.color;

            wx_alert_html += '<div class="wx-alert-' + i + '" style="color:#' + wx_alert_color + ';">' + wx_alert + " - " + wx_alert_start + ' until ' + wx_alert_end + '</div>';
        }
        // Update the page with alert html
        jQuery(".weather-alerts").html( wx_alert_html );
    } else {
        // No alerts to disaply
        jQuery(".weather-alerts").html( "" );
    }

    // More updates
    // jQuery(".KMEM-wind-direction-deg").html( data.current[0].response[0].ob.windDirDEG + " &deg;");
    // jQuery(".KMEM-wind-speed-mph").html( data.current[0].response[0].ob.windSpeedMPH + " mph" );

    // Loop through METAR data for each station
    for ( let i = 0; i < data.observations[0].response.length; i++ ) {

        // Display station ID and update times, color code depending on age of the data 
        function metarColorCode ( loc , time ) {

            // Display time of observations
            jQuery("." + loc + "-id-updated").html( "<div class='metar-id'>" + loc + "</div><div class='metar-update-time'>" + dayjs.unix(time).format("h:mm A") + "</div>" ); 
            // New bottom row info
            if ( loc == "KMEM" ) {
                jQuery(".airport1-id").html( loc + " " + dayjs.unix(time).format("h:mm A") );
                jQuery(".airport1-temp").html( "OAT: " + data.observations[0].response[i].ob.tempF );
            }
            // jQuery(".KOLVupdated").html( "OLV Updated: " + dayjs.unix(time).format("h:mm A") );

            // Color code station ID based on age of observation
            let timeDiff = dayjs().unix() - dayjs(time);
            if ( timeDiff < 1200 ) {
                // Fresh data, less than 20 minutes old
                jQuery("." + loc + "-id-updated").css( "color", "rgb(90, 170, 90)" );
            } else if ( timeDiff > 1200 && timeDiff < 2400 ) {
                // Semistale data - between 20 and 40 minutes old 
                jQuery("." + loc + "-id-updated").css( "color", "rgb(244, 198, 113)" );
            } else if ( timeDiff > 2400 && timeDiff < 3600 ) {
                // Stale data - between 40 and 60 minutes old
                jQuery("." + loc + "-id-updated").css( "color", "rgb(220, 120, 120)" );
            } else {
                // Old data - older than an hour
                jQuery("." + loc + "-id-updated").css( "color", "rgb(160, 90, 90)" );
            }
        }

        // Rotate wind direction widgit arrow
        function rotateWindDir ( loc , k_newRotation ) {
            if ( k_newRotation == "N/A") { return; }
            
            let k_currentRotation;
            let k_finalRotation;
            
            k_finalRotation = k_finalRotation || 0; // if k_finalRotation undefined or 0, make 0, else k_finalRotation
            k_currentRotation = k_finalRotation % 360;
            
            if ( k_currentRotation < 0 ) { k_currentRotation += 360; }
            if ( k_currentRotation < 180 && (k_newRotation > (k_currentRotation + 180)) ) { k_finalRotation -= 360; }
            if ( k_currentRotation >= 180 && (k_newRotation <= (k_currentRotation - 180)) ) { k_finalRotation += 360; }
            
            k_finalRotation += (k_newRotation - k_currentRotation);
            
            jQuery("." + loc + "-windDirectionArrow").css( "transform", "rotate(" + k_finalRotation + "deg)" );
        }

        // Rotate wind speed widget arrow
        function rotateWindSpeed ( loc , windSpeed ) {
            // Set default highest speed of the meter
            let scaleMax = 20;

            if ( windSpeed > scaleMax ) {
                scaleMax = windSpeed;
            }
            jQuery("." + loc + "-windometer-legend-hi").html( scaleMax );

            // Convert speeds into angles
            let windSpeedometer = ( windSpeed / scaleMax * 180 ) - 90;

            // Keep the meter from over-shooting
            if ( windSpeedometer > 90 ) {
                windSpeedometer = 90;
            }

            jQuery("." + loc + "-wind-speed-arrow").css( "transform", "rotate(" + windSpeedometer + "deg)" );
        }

        // Display wind gusts if observed
        function windGusts ( loc , gustMPH , gustKTS ) {

            if ( !gustMPH ){
                jQuery("." + loc + "-wind-gust-mph").html( "" );
                jQuery("." + loc + "-wind-gust-kts").html( "" );
            } else {
                jQuery("." + loc + "-wind-gust-mph").html( "G" + gustMPH );
                jQuery("." + loc + "-wind-gust-kts").html( "G" + gustKTS );
            }
        }

        // Display and color code flight rules
        function flightRules ( loc , rules ) {

            jQuery("." + loc + "-rules").html( rules );
            if ( rules === "MVFR" ) {
                jQuery("." + loc + "-rules").css( "color", "rgb(102, 102, 255)" );
            } else if ( rules === "IFR" ) {
                jQuery("." + loc + "-rules").css( "color", "red" );
            } else if ( rules === "LIFR" ) {
                jQuery("." + loc + "-rules").css( "color", "purple" );
            } else if ( rules === "VFR" ) {
                jQuery("." + loc + "-rules").css( "color", "rgba(0,0,0,0)" );
            }
        }

        // Split up raw metar to display reported cloud layers
        function sky ( loc , raw ) {

            let rawSplit = raw.split(" ");
            let sky_html = "Sky:";
            
            for ( let j = 0; j < rawSplit.length; j++ ) {
                if ( rawSplit[j].slice(0,3) === "FEW" || rawSplit[j].slice(0,3) === "SCT"  || rawSplit[j].slice(0,3) === "BKN" || rawSplit[j].slice(0,3) === "OVC" ) {
                    sky_html += " " + rawSplit[j];
                } else if ( rawSplit[j] === "CLR" ) {
                    sky_html += " Clear";
                }
            }
            
            jQuery("." + loc + "-sky").html( sky_html );
        }

        // Station location identifier
        let location = data.observations[0].response[i].id;

        metarColorCode ( location , data.observations[0].response[i].ob.timestamp );
        rotateWindDir( location , data.observations[0].response[i].ob.windDirDEG );
        rotateWindSpeed ( location , data.observations[0].response[i].ob.windSpeedMPH );
        windGusts ( location , data.observations[0].response[i].ob.windGustMPH , data.observations[0].response[i].ob.windGustKTS );
        flightRules ( location, data.observations[0].response[i].ob.flightRule );
        sky ( location , data.observations[0].response[i].raw );

        jQuery("." + location + "-wind-direction").html( data.observations[0].response[i].ob.windDir );
        //jQuery("." + location + "-wind-direction-deg").html( data.observations[0].response[i].ob.windDirDEG + "&deg;" );
        jQuery("." + location + "-wind-speed-mph").html( data.observations[0].response[i].ob.windSpeedMPH );
        jQuery("." + location + "-wind-speed-kts").html( data.observations[0].response[i].ob.windSpeedKTS + " kts" );
        jQuery("." + location + "-vis").html("Vis:  " + data.observations[0].response[i].ob.visibilityMI + "sm" );

        if ( data.observations[0].response[i].ob.windDirDEG >= 0 ) {
            jQuery("." + location + "-wind-direction-deg").html( data.observations[0].response[i].ob.windDirDEG + "&deg;" );
        } else {
            jQuery("." + location + "-wind-direction-deg").html( "--" );
        }
    }

    //// Forecasts for Day Night Periods ////
    // Loop through each day-night forecast period and build forecast section HTML
    for (let i = 0; i < data.daynight[0].response[0].periods.length; i++) {

        if (data.daynight[0].response[0].periods[i].isDay) {
            if (i === 0) {
                jQuery(".forecast-p" + i + "-date").html("Today");
            } else {
                jQuery(".forecast-p" + i + "-date").html( dayjs.unix(data.daynight[0].response[0].periods[i].timestamp).format('dddd')  );
            }
            let temp =  parseFloat(data.daynight[0].response[0].periods[i].maxTempF).toFixed(0);
            jQuery(".forecast-p" + i + "-hilo-txt").html( "High: " );
            jQuery(".forecast-p" + i + "-hilo-temp").html( temp + "&deg;" );
            jQuery(".forecast-p" + i + "-hilo-temp").css( "color", colorizeTemp( temp ) );

        } else {
            if (i === 0 || i === 1) {
                jQuery(".forecast-p" + i + "-date").html("Tonight");
            } else {
                jQuery(".forecast-p" + i + "-date").html( dayjs.unix(data.daynight[0].response[0].periods[i].timestamp).format("ddd") + " Night"  );
            }
            let temp = parseFloat(data.daynight[0].response[0].periods[i].minTempF).toFixed(0);
            jQuery(".forecast-p" + i + "-hilo-txt").html( "Low: " );
            jQuery(".forecast-p" + i + "-hilo-temp").html( temp + "&deg;" );
            jQuery(".forecast-p" + i + "-hilo-temp").css( "color", colorizeTemp( temp ) );
        }

        if (data.daynight[0].response[0].periods[i].windSpeedMinMPH === data.daynight[0].response[0].periods[i].windSpeedMaxMPH ){
            jQuery(".forecast-p" + i + "-windSpd").html(data.daynight[0].response[0].periods[i].windSpeedMPH + '');
        } else {
            jQuery(".forecast-p" + i + "-windSpd").html(data.daynight[0].response[0].periods[i].windSpeedMinMPH + ' - ' + data.daynight[0].response[0].periods[i].windSpeedMaxMPH + '');
        }

        jQuery(".forecast-p" + i + "-windDir").html(data.daynight[0].response[0].periods[i].windDir);
        jQuery(".forecast-p" + i + "-icon").html('<img src="./icons/' + data.daynight[0].response[0].periods[i].icon + '" align="right">');
        jQuery(".forecast-p" + i + "-wxPriCode").html( data.daynight[0].response[0].periods[i].weatherPrimary );
        jQuery(".forecast-p" + i + "-pop").html(data.daynight[0].response[0].periods[i].pop + '%');
        jQuery(".forecast-p" + i + "-precip").html(data.daynight[0].response[0].periods[i].precipIN + '"');
    }
}

////////////////////
// Sun animation
////////////////////
console.log("C-v1");
var ctx;
var sunPath;

function canvas_sunInit () {
    const canvasSunPath = document.querySelector('#arcs');
    ctx = canvasSunPath.getContext('2d');

    // The circular path which the sun, moon, and markings travel upon
    // changing radius here will scale entire drawing
    sunPath = {
        x: canvasSunPath.width / 2,
        y: canvasSunPath.height / 2,
        radius: 80,
        strA: 0,
        endA: Math.PI * 2,
    }
    drawSunPath();
}
// Returns an object containing the (x,y) coordinates along the sun/moon path for a given angle
// alternativly if radius is given, returns a point anywhere on canvas defined by angle and radius
function PointOnPath ( angle , radius ) {
    // Use the down/midnight position as zero degrees (referance)
    this.radians = ( angle + 90 ) * Math.PI / 180;
    this.radius = radius === undefined ? sunPath.radius : radius;
    this.x = sunPath.x + ( this.radius * Math.cos( this.radians ) );
    this.y = sunPath.y + ( this.radius * Math.sin( this.radians ) );
}

// Begin function list that defines the several shapes on canvas
function drawSunPath () {
    ctx.beginPath();
    ctx.arc( sunPath.x, sunPath.y, sunPath.radius, sunPath.strA, sunPath.endA );
    ctx.lineWidth = 2;
    ctx.strokeStyle = 'rgb(80, 80, 80)';
    ctx.stroke();
}

